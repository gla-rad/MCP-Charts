# Default values for mc-service-registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/maritimeconnectivity/serviceregistry
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "mcp-admin"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8444

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: mc-service-registry.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

waitForServices:
  - serviceName: mc-keycloak
    servicePort: 8090

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

env:
- name: DATABASE_SERVER_TYPE
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_database_type
- name: DATABASE_SERVER_HOST
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_database_host
- name: DATABASE_SERVER_PORT
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_database_port
- name: DATABASE_USERNAME
  valueFrom:
    secretKeyRef:
      name: mc-service-registry-secrets
      key: msr_database_username
- name: DATABASE_PASSWORD
  valueFrom:
    secretKeyRef:
      name: mc-service-registry-secrets
      key: msr_database_password
- name: KEYCLOAK_SERVER_URL
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: keycloak_url
- name: KEYCLOAK_CLIENT_REALM
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: keycloak_realm
- name: KEYCLOAK_CLIENT_ID
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_keycloak_client_id
- name: KEYCLOAK_CLIENT_SECRET
  valueFrom:
    secretKeyRef:
      name: mc-service-registry-secrets
      key: msr_keycloak_client_secret
- name: MCP_MIR_URL
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: mcp_identity_register_api_url
- name: MCP_LEDGER_HOST
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_ledger_host
- name: MCP_LEDGER_PORT
  valueFrom:
    configMapKeyRef:
      name: mc-service-registry-config
      key: msr_ledger_port
- name: MCP_LEDGER_ADDRESS
  valueFrom:
    secretKeyRef:
      name: mc-service-registry-secrets
      key: msr_ledger_address
- name: MCP_LEDGER_CREDENTIALS
  valueFrom:
    secretKeyRef:
      name: mc-service-registry-secrets
      key: msr_ledger_credentials
- name: CONTEXT_PATH
  value: /mcp/msr

livenessProbe:
  httpGet:
    path: /mcp/msr/actuator/health/liveness
    port: http
readinessProbe:
  httpGet:
    path: /mcp/msr/actuator/health/readiness
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {
  "kubernetes.io/os": linux
}

tolerations: []

affinity: {}
