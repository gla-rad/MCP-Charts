# Default values for mc-mms-router.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:

  #
  # Common Variables
  #
  keycloak_url: "http://localhost/mcp"
  keycloak_realm: "MCP"

  # The MMS Router Chart
  mc_mms_router:
    #
    # Input Files
    #
    private_key: ""
    certificate: ""
    certificate_key: ""
    client_ca: ""
    beacons: ""

    #
    # Credentials
    #
    
    #
    # Other Configuration
    #
    port: 8080
    port_libp2p: 9000

replicaCount: 1

image:
  repository: ghcr.io/gla-rad/mc-mms-router 
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  port_libp2p: 9000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

env:
- name: PRIVKEY
  value: "/conf/pk.key"
- name: CERT_PATH
  value: "/conf/tls.crt"
- name: CERT_KEY_PATH
  value: "/conf/tlspk.key"
- name: CLIENT_CA
  value: "/conf/ca-chain.pem"
- name: PORT
  valueFrom:
    configMapKeyRef:
      name: mc-mms-router-config
      key: port
- name: LIBP2P_PORT
  valueFrom:
    configMapKeyRef:
      name: mc-mms-router-config
      key: port_libp2p

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: config-volume
  projected:
    sources:
    - secret:
        name: mc-mms-router-secrets
        items:
        - key: private_key
          path: pk.key
    - secret:
        name: mc-mms-router-secrets
        items:
        - key: certificate
          path: tls.crt
    - secret:
        name: mc-mms-router-secrets
        items:
        - key: certificate_key
          path: tlspk.key
    - secret:
        name: mc-mms-router-secrets
        items:
        - key: client_ca
          path: ca-chain.pem
    - secret:
        name: mc-mms-router-secrets
        items:
        - key: beacons
          path: beacons.txt

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: config-volume
  mountPath: "/conf"
  readOnly: true

nodeSelector: {
  "kubernetes.io/os": linux
}

tolerations: []

affinity: {}
